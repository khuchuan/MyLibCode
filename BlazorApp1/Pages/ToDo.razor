@page "/todo"

@using BlazorApp1.Models
@using BlazorApp1.Services
@inject BlazorApp1.Services.IToDoService ToDoSvcInstance

<h1>To-Do-List</h1>

@if(items == null)
{
    <p><em>Loading ...</em></p>
}
else if (!items.Any())
{
    <p><em>No ToDo items exist.  Please add some.</em></p>
}
else
{
    @*Co ton tai du lieu, bind du lieu vao day*@
    <table class="table">
        <thead>
            <tr>
                <th>Remove</th>
                <th>
                    <span class="sort-link" @onclick=@(() => SortTable("DateCreated"))>Date</span>
                    <span>@(GetSortStyle("DateCreated"))</span>
                </th>
                <th>
                    <span class="sort-link" @onclick=@(() => SortTable("Description"))>Description</span>
                    <span>@(GetSortStyle("Description"))</span>
                </th>
                <th>Is Complete</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in items)
            {
                <tr style="@(item.IsComplete ? "text-decoration: line-through": "")">
                    <td>
                        <button @onclick="(() => RemoveTodo(item.ID))"><i class="oi oi-trash"></i></button>
                    </td>
                    <td>@item.DateCreated</td>
                    <td>@item.Description</td>
                    <td>
                        @if (item.IsComplete)
                        {
                            <input type="checkbox" @onchange="( () => ToggleToDo(item.ID) )" checked>
                        }
                        else
                        {
                            <input type="checkbox" @onchange="( () => ToggleToDo(item.ID) )">
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

}


@if (items != null)
{
    <input placeholder="A new ToDo item" @bind="@newItem" />
    <button @onclick="AddTodo">Create</button>
}


@code {
    List<ToDoItem> items = new List<ToDoItem>();
    private string newItem;
    private string CurrentSortColumn;
    private bool IsSortedAscending;

    private void AddTodo()
    {
        if (!string.IsNullOrEmpty(newItem))
        {
            var newToDoItem = new ToDoItem()
            {
                DateCreated = DateTime.Now,
                Description = newItem,
                ID = Guid.NewGuid()
            };

            items = ToDoSvcInstance.Add(newToDoItem);

            newItem = string.Empty; //We need to reset this string, otherwise the text box will still contain the value typed in.
        }        
    }

    private void ToggleToDo(Guid id)
    {
        items = ToDoSvcInstance.Toggle(id);
    }

    private void RemoveTodo(Guid id)
    {
        items = ToDoSvcInstance.Delete(id);
    }

    protected override void OnInitialized()
    {
        items = ToDoSvcInstance.Get();
    }

    private void SortTable(string columnName)
    {
        if (columnName != CurrentSortColumn)
        {
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;
        }
        else // Sort same column but in different direction
        {
            if (IsSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            IsSortedAscending = !IsSortedAscending;
        }
    }

    private string GetSortStyle(string columnName)
    {
        if (CurrentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (IsSortedAscending)
        {
            return "▲";
        }
        else
        {
            return "▼";
        }
    }



}
